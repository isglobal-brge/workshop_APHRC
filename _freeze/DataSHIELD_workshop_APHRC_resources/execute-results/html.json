{
  "hash": "874f1aa896c4187786598c3c9a91ebf3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"DataSHIELD Workshop: Data Science Without Borders\"\nfreeze: true\nformat: \n  html:\n    code-copy: false\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  error: true\n---\n\n# Analysis using the `resources`\n\n\nNow, let us illustrate a similar analysis of the previous example using CNSIM datasets but having the data as a resource. Now the resources are available in a project called `RSRC` (see https://opal-demo.obiba.org/#/project/RSRC/resources). Now, we write all the require code in a single chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(DSOpal)\nlibrary(dsBaseClient)\n\n# prepare login data and resources to assign\nbuilder <- DSI::newDSLoginBuilder()\nbuilder$append(server = \"study1\", url = \"https://opal-demo.obiba.org\", \n               user = \"dsuser\", password = \"P@ssw0rd\", \n               resource = \"RSRC.CNSIM1\", profile = \"default\")\n#builder$append(server = \"study2\", url = \"https://opal.isglobal.org/repo\",\n#               user = \"invited\",  password = \"12345678Aa@\",, \n#               resource = \"CNSIM.CNSIM2\", profile = \"rock-inma\")\n\nlogindata <- builder$build()\n\n# login and assign resources\nconns <- datashield.login(logins = logindata, assign = TRUE, symbol = \"res\")\n\n# assigned objects are of class ResourceClient (and others)\nds.class(\"res\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$study1\n[1] \"SQLResourceClient\" \"ResourceClient\"    \"R6\"               \n```\n\n\n:::\n\n```{.r .cell-code}\n# coerce ResourceClient objects to data.frames\n# (DataSHIELD config allows as.resource.data.frame() assignment function for the purpose of the demo)\ndatashield.assign.expr(conns, symbol = \"D\", \n                       expr = quote(as.resource.data.frame(res, strict = TRUE)))\nds.class(\"D\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$study1\n[1] \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.colnames(\"D\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$study1\n [1] \"id\"                 \"LAB_TSC\"            \"LAB_TRIG\"          \n [4] \"LAB_HDL\"            \"LAB_GLUC_ADJUSTED\"  \"PM_BMI_CONTINUOUS\" \n [7] \"DIS_CVA\"            \"MEDI_LPD\"           \"DIS_DIAB\"          \n[10] \"DIS_AMI\"            \"GENDER\"             \"PM_BMI_CATEGORICAL\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# do usual dsBase analysis\nds.summary('D$LAB_HDL')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$study1\n$study1$class\n[1] \"numeric\"\n\n$study1$length\n[1] 2163\n\n$study1$`quantiles & mean`\n      5%      10%      25%      50%      75%      90%      95%     Mean \n0.875240 1.047400 1.300000 1.581000 1.844500 2.090000 2.210900 1.569416 \n```\n\n\n:::\n\n```{.r .cell-code}\n# vector types are not necessarily the same depending on the data reader that was used\nds.class('D$GENDER')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$study1\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.asFactor('D$GENDER', 'GENDER')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$all.unique.levels\n[1] \"0\" \"1\"\n\n$return.message\n[1] \"Data object <GENDER> correctly created in all specified data sources\"\n```\n\n\n:::\n\n```{.r .cell-code}\nds.summary('GENDER')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$study1\n$study1$class\n[1] \"factor\"\n\n$study1$length\n[1] 2163\n\n$study1$categories\n[1] \"0\" \"1\"\n\n$study1$`count of '0'`\n[1] 1092\n\n$study1$`count of '1'`\n[1] 1071\n```\n\n\n:::\n\n```{.r .cell-code}\nmod <- ds.glm(\"DIS_DIAB ~ LAB_TRIG + GENDER\", data = \"D\" , family=\"binomial\")\nmod$coeff\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              Estimate Std. Error    z-value      p-value low0.95CI.LP\n(Intercept) -5.1696619  0.4549328 -11.363572 6.349427e-30   -6.0613138\nLAB_TRIG     0.3813891  0.1037611   3.675647 2.372471e-04    0.1780211\nGENDER      -0.2260851  0.4375864  -0.516664 6.053908e-01   -1.0837387\n            high0.95CI.LP        P_OR low0.95CI.P_OR high0.95CI.P_OR\n(Intercept)    -4.2780099 0.005654338    0.002325913      0.01368049\nLAB_TRIG        0.5847570 1.464317247    1.194850574      1.79455494\nGENDER          0.6315685 0.797650197    0.338328242      1.88055787\n```\n\n\n:::\n\n```{.r .cell-code}\ndatashield.logout(conns)\n```\n:::\n\n\n\n\nThe Figure \\@ref(fig:opalOmic) describes the different types of 'omic association analyses that can be performed using DataSHIELD client functions implemented in the *[dsOmicsClient](https://github.com/isglobal-brge/dsOmicsClient)* package. Basically, data ('omic and phenotypes/covariates) can be stored in different sites (http, ssh, AWS S3, local, ...) and are managed with Opal through the *[resourcer](https://github.com/obiba/resourcer)* package and their extensions implemented in *[dsOmics](https://github.com/isglobal-brge/dsOmics)*.  \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Non-disclosive omic data analysis with DataSHIELD and Bioconductor. The figure illustrates how the `resourcer` package is used to get access to omic data through the Opal servers. Then DataSHIELD is used in the client side to perform non-disclosive data analyses.](fig/dsOmics_A.jpg){fig-align='center'}\n:::\n:::\n\n\n\nThe `dsOmicsClient` package allows different types of analyses: pooled and meta-analysis. Both methods are based on fitting different Generalized Linear Models (GLMs) for each feature when assessing association between 'omic data and the phenotype/trait/condition of interest. Of course, non-disclosive 'omic data analysis from a single study can also be performed.\n\nThe **pooled approach** (Figure \\@ref(fig:omicAnal1)) is recommended when the user wants to analyze 'omic data from different sources and obtain results as if the data were located in a single computer. It should be noted that this can be very time consuming when analyzing multiple features since it calls a base function in DataSHIELD (`ds.glm`) repeatedly. It also cannot be recommended when data are not properly harmonized (e.g. gene expression normalized using different methods, GWAS data having different platforms, ...). Furthermore when it is necesary to remove unwanted variability (for transcriptomic and epigenomica analysis) or control for population stratification (for GWAS analysis), this approach cannot be used since we need to develop methods to compute surrogate variables (to remove unwanted variability) or PCAs (to to address population stratification) in a non-disclosive way. \n\n\nThe **meta-analysis approach** Figure \\@ref(fig:omicAnal2) overcomes the limitations raised when performing pooled analyses. First, the computation issue is addressed by using scalable and fast methods to perform data analysis at whole-genome level at each location The transcriptomic and epigenomic data analyses make use of the widely used *[limma](https://bioconductor.org/packages/3.20/limma)* package that uses `ExpressionSet` or `RangedSummarizedExperiment` Bioc infrastructures to deal with 'omic and phenotypic (e.g covariates). The genomic data are analyzed using *[GWASTools](https://bioconductor.org/packages/3.20/GWASTools)* and *[GENESIS](https://bioconductor.org/packages/3.20/GENESIS)* that are designed to perform quality control (QC) and GWAS using GDS infrastructure.\n\n\nNext, we describe how both approaches are implemented: \n\n- **Pooled approach:** Figure \\@ref(fig:omicAnal1) illustrate how this analysis is performed. This corresponds to generalized linear models (glm) on data from single or multiple sources. It makes use of `ds.glm()` function which is a DataSHIELD function that uses an approach that is mathematically equivalent to placing all individual-level data froma all sources in one central warehouse and analysing those data using the conventional `glm()` function in R. The user can select one (or multiple) features (i.e., genes, transcripts, CpGs, SNPs, ...) \n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Non-disclosive omic data analysis with DataSHIELD and Bioconductor. The figure illustrates how to perform single pooled omic data analysis. The analyses are performed by using a generalized linear model (glm) on data from one or multiple sources. It makes use of `ds.glm()`, a DataSHIELD function, that uses an approach that is mathematically equivalent to placing all individual-level data from all sources in one central warehouse and analysing those data using the conventional `glm()` function in R.](fig/dsOmics_B.jpg){fig-align='center'}\n:::\n:::\n\n\n\n- **Meta-analysis:** Figure \\@ref(fig:omicAnal2) illustrate how this analysis is performed. This corresponds to performing a genome-wide analysis at each location using functions that are specifically design for that purpose and that are scalable. Then the results from each location can be meta-analyzed using methods that meta-analyze either effect sizes or p-values.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Non-disclosive omic data analysis with DataSHIELD and Bioconductor. The figure illustrates how to perform anlyses at genome-wide level from one or multiple sources. It runs standard Bioconductor functions at each server independently to speed up the analyses and in the case of having multiple sources, results can be meta-analyzed uning standar R functions.](fig/dsOmics_C.jpg){fig-align='center'}\n:::\n:::\n\n\n\n# Differential gene expression (DGE) analysis\n\n\n\n\n\n\n\n\n\n\nDon't forget to log out! Using:\n\n::: {.cell}\n\n```{.r .cell-code}\ndatashield.logout(conns)\n```\n:::\n\n\n\n\n\n# Exercise\n\n\nTo be supplied",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}